version: 2

jobs:
 # must be called build for local circle cli to work
 # is actually unit tests
 build:
  docker:
   - image: holochain/holochain-rust:latest
  resource_class: large
  steps:
   - checkout
   - run: nix-shell --run hc-test

 fmt:
  docker:
   - image: holochain/holochain-rust:latest
  steps:
   - checkout
   - run: nix-shell --run hc-fmt-check
   # don't allow unpinned deps
   - run:
      name: no unpinnned deps
      command: |
        # temporary avoid build fails due to greps
        set +eo pipefail
        export UNPINNED=`nix-shell --run hc-cargo-toml-grep-unpinned`
        set -eo pipefail
        if [[ $UNPINNED ]]
        then
         echo "unpinned deps must be empty:"
         echo "$UNPINNED"
         exit 1
        fi
   # don't allow changelog root items with no PR reference
   - run:
      name: no changelogs without PR references
      command: |
        # temporary avoid build fails due to greps
        set +eo pipefail
        export UNREFERENCED=`nix-shell --run hc-changelog-grep-pr-references`
        set -eo pipefail
        if [[ $UNREFERENCED ]]
        then
          echo "all root level changelog items need a PR reference:"
          echo "$UNREFERENCED"
          exit 1
        fi

   # flag any references to a nightly version in a readme other than the
   # ${date} in nix-shell
   - run:
      name: no readmes with bad rust nightly versions
      command: |
        # temporary avoid build fails due to greps
        set +eo pipefail
        export BAD_NIGHTLY=`nix-shell --run hc-readme-grep-nightly`
        set -eo pipefail
        if [[ $BAD_NIGHTLY ]]
        then
          echo "there is an incorrect nightly version in a readme file:"
          echo $BAD_NIGHTLY
          exit 1
        fi

 app-spec-tests:
  docker:
   - image: holochain/holochain-rust:latest
  resource_class: xlarge
  steps:
   - checkout

   - run:
       name: install cli
       command: nix-shell --run hc-install-cli

   - run:
       name: install node conductor
       command: nix-shell --run hc-install-node-conductor

   - run:
       name: app spec tests
       command: nix-shell --run hc-test-app-spec

   - run:
       name: nodejs conductor tests
       command: nix-shell --run hc-test-node-conductor

 cli-tests:
  docker:
   - image: holochain/holochain-rust:latest
  steps:
   - checkout

   - run:
       name: install cli
       command: nix-shell --run hc-install-cli

   - run:
      name: test cli
      command: nix-shell --run hc-test-cli

 # https://circleci.com/docs/2.0/building-docker-images/
 docker.start:
  machine: true
  steps:
   - checkout
   - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
   - run: docker build -f .circleci/Dockerfile..start -t holochain/holochain-rust:circle..start .
   - run: docker push holochain/holochain-rust:circle..start
 docker.01:
  machine: true
  steps:
   - checkout
   - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
   - run: docker pull holochain/holochain-rust:circle..start
   - run: docker build -f .circleci/Dockerfile.01.warm.nix -t holochain/holochain-rust:circle.01.warm.nix .
   - run: docker push holochain/holochain-rust:circle.01.warm.nix
 docker.02:
  machine: true
  steps:
   - checkout
   - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
   - run: docker pull holochain/holochain-rust:circle.01.warm.nix
   - run: docker build -f .circleci/Dockerfile.02.warm.tests -t holochain/holochain-rust:circle.02.warm.tests .
   - run: docker push holochain/holochain-rust:circle.02.warm.tests
 docker.03:
  machine: true
  steps:
   - checkout
   - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
   - run: docker pull holochain/holochain-rust:circle.02.warm.tests
   - run: docker build -f .circleci/Dockerfile.03.warm.tools -t holochain/holochain-rust:circle.03.warm.tools .
   - run: docker push holochain/holochain-rust:circle.03.warm.tools
 docker.end:
  machine: true
  steps:
   - checkout
   - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
   - run: docker pull holochain/holochain-rust:circle.03.warm.tools
   - run: docker build -f .circleci/Dockerfile.zz.end -t holochain/holochain-rust:circle.zz.end -t holochain/holochain-rust:develop -t holochain/holochain-rust:latest .
   - run: docker push holochain/holochain-rust:circle.zz.end
   - run: docker push holochain/holochain-rust:develop
   - run: docker push holochain/holochain-rust:latest

 cold.ubuntu.bionic.auto:
  docker:
   - image: ubuntu:bionic
  resource_class: xlarge
  steps:
   - checkout
   - run: . ./scripts/install/auto.sh
   - run: make test

 # https://github.com/NixOS/nix/issues/1559
 # cold.ubuntu.bionic.nix:
 #  docker:
 #   - image: ubuntu:bionic
 #  resource_class: xlarge
 #  steps:
 #   - checkout
 #   - run:
 #      name: Install and run all tests via nix
 #      command: |
 #       export USER=`whoami`
 #       apt-get update && apt-get install -y curl bzip2 sudo
 #       curl https://nixos.org/nix/install | sh
 #       nix-shell --run hc-test-all

 cold.ubuntu.xenial.auto:
  docker:
   - image: ubuntu:xenial
  resource_class: xlarge
  steps:
   - checkout
   - run: . ./scripts/install/auto.sh
   - run: make test

 # https://github.com/NixOS/nix/issues/1559
 # cold.ubuntu.xenial.nix:
 #  docker:
 #   - image: ubuntu:xenial
 #  resource_class: xlarge
 #  steps:
 #   - checkout
 #   - run:
 #      name: Install and run all tests via nix
 #      command: |
 #       export USER=`whoami`
 #       apt-get update && apt-get install -y curl bzip2 sudo
 #       curl https://nixos.org/nix/install | sh
 #       nix-shell --run hc-test-all

 cold.debian.stable.auto:
  docker:
   - image: debian:stable
  resource_class: xlarge
  steps:
   - checkout
   - run: . ./scripts/install/auto.sh
   - run: make test

 # https://github.com/NixOS/nix/issues/1559
 # cold.debian.stable.nix:
 #  docker:
 #   - image: debian:stable
 #  resource_class: xlarge
 #  steps:
 #   - checkout
 #   - run:
 #      name: Install and run all tests via nix
 #      command: |
 #       export USER=`whoami`
 #       apt-get update && apt-get install -y curl bzip2 sudo
 #       curl https://nixos.org/nix/install | sh
 #       nix-shell --run hc-test-all

 cold.mac.10.auto:
  macos:
   xcode: "10.2.0"
  steps:
   - checkout
   - run: . ./scripts/install/auto.sh
   - run: make test

 cold.mac.10.nix:
  macos:
   xcode: "10.2.0"
  steps:
   - checkout
   - run:
      name: Install and run all tests via nix
      command: |
       curl https://nixos.org/nix/install | sh
       . /Users/distiller/.nix-profile/etc/profile.d/nix.sh
       nix-shell --run hc-test-all

workflows:
 version: 2
 tests:
  jobs:
   - build
   - fmt
   - app-spec-tests
   - cli-tests

 cold.ubuntu:
  jobs:
   - cold.ubuntu.bionic.auto:
      filters:
       branches:
        only:
         - develop
   # - cold.ubuntu.bionic.nix

   - cold.ubuntu.xenial.auto:
      filters:
       branches:
        only:
         - develop
   # - cold.ubuntu.xenial.nix

 cold.debian:
  jobs:
   - cold.debian.stable.auto:
      filters:
       branches:
        only:
         - develop
   # - cold.debian.stable.nix

 cold.mac:
  jobs:
   - cold.mac.10.auto:
      filters:
       branches:
        only:
         - develop
   - cold.mac.10.nix:
      filters:
       branches:
        only:
         - develop

 dockers:
  # https://circleci.com/docs/2.0/workflows/#scheduling-a-workflow
  triggers:
   - schedule:
      cron: "0 0 * * *"
      filters:
       branches:
        only:
         - develop
  jobs:
   - docker.start
   - docker.01:
      requires:
       - docker.start
   - docker.02:
      requires:
       - docker.01
   - docker.03:
      requires:
       - docker.02
   - docker.end:
      requires:
       - docker.03
